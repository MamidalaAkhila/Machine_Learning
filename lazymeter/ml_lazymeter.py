# -*- coding: utf-8 -*-
"""ml_lazymeter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OeyCPXrxe6S0FO1bitHPY-y_r5769i-G
"""

import pandas as pd
df = pd.read_csv('lazymeter_dataset_v2.csv')
df.head()

#preprocessing
# Map labels to numerical classes
df['label_encoded'] = df['label'].map({
    'productive': 0,
    'idle': 1,
    'procrastinating': 2
})

# Define features and target
X = df.drop(['label', 'label_encoded'], axis=1)
y = df['label_encoded']

# Train/test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

#data analysis
import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='label', data=df)
plt.title("Label Distribution")
plt.show()
sns.heatmap(df.drop('label', axis=1).corr(), annot=True, fmt=".2f", cmap='coolwarm')
plt.title("Feature Correlation")
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, ConfusionMatrixDisplay

# Logistic Regression
lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Decision Tree
dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)
y_pred_dt = dt.predict(X_test)

# Evaluation Function
def evaluate(model_name, y_true, y_pred):
    print(f"Model: {model_name}")
    print("Accuracy:", accuracy_score(y_true, y_pred))
    print(classification_report(y_true, y_pred))
    cm = confusion_matrix(y_true, y_pred)
    ConfusionMatrixDisplay(cm).plot()
    plt.title(f"{model_name} - Confusion Matrix")
    plt.show()

evaluate("Logistic Regression", y_test, y_pred_lr)
evaluate("Decision Tree", y_test, y_pred_dt)

# Create a binary label: 1 = procrastinating, 0 = not
df['binary_label'] = df['label'].apply(lambda x: 1 if x == 'procrastinating' else 0)

X = df.drop(['label', 'label_encoded', 'binary_label'], axis=1)
y = df['binary_label']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)

from sklearn.linear_model import LogisticRegression

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
y_probs = model.predict_proba(X_test)[:, 1]  # Probabilities for class 1

from sklearn.metrics import roc_curve, auc
import matplotlib.pyplot as plt

fpr, tpr, thresholds = roc_curve(y_test, y_probs)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2, label=f'ROC curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Procrastination Detection')
plt.legend(loc="lower right")
plt.grid(True)
plt.show()